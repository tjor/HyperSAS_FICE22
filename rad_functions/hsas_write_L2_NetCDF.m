function hsas_write_L2_NetCDF(L2, fn)
    # L2                : structure generated by proc_L2.m
    % fn                : name of the netcdf file

    pkg load netcdf  # tested with netcdf-1.0.12



    # delete file if it exists
    if exist(fn)
      disp(['deleting existing file: ', fn]);
      fflush(stdout);
      system(['rm ', fn]);
    endif


    % Define max size of dimensions
    i_wv = 256;
    i_time = Inf;

    % time origin (for units)
    torigin = y0(year(L2.time(1)));
    
    # define NetCDF_format to use ("Format": This can be "netcdf4_classic" (default), "classic", "64bit" or "netcdf4".)
    fmt = "netcdf4_classic";

    # Satlantic standard units
    units_irr = "uW/cm^2/nm";
    units_rad = "uW/cm^2/nm/sr";
    
    # instrument brand and model
    instrument_model = L2.hdr.INSTRUMENT_id;
    
    # compression_level for the NetCDF4 file (0= no compression, 9=max xompression, but long to read and write)
    compression_level = 1;
    
    % the number of elements for unlimited dimensions and has the special value inf
    % The dimension can also have a fixed size.
    % Use the additional option 'Format','64bit' to create a netcdf file compatible 
    % with the library version 3.6

    ### create NetCDF variables and attributes for L2.instr
    f1 = fieldnames(L2.instr);
    

    for ifld = 1:length(f1)
        nccreate(fn, f1{ifld}, "Dimensions", {"time",i_time, "wavelength", i_wv}, "Format", fmt, 'DeflateLevel', compression_level );
        
        if strcmp(f1{ifld}, "Es")
            ncwriteatt(fn, f1{ifld}, 'units', units_irr);
        else
            ncwriteatt(fn, f1{ifld}, 'units', units_rad);
        endif
        
        ncwriteatt(fn, f1{ifld}, 'instrument_model', instrument_model);
        
        ncwriteatt(fn, f1{ifld}, 'serial number', L2.instr.(f1{ifld}).sn);
        
        ncwriteatt(fn, f1{ifld}, 'calibration file used to process the raw digital counts', L2.instr.(f1{ifld}).cal_file);
        ncwriteatt(fn, f1{ifld}, 'calibration data', 'average calibration coefficients from pre and post cruise cals');
        ncwriteatt(fn, f1{ifld}, 'calibration dates', "2014 01 06, 2015 03 04");
        
        ncwrite(fn,f1{ifld}, L2.instr.(f1{ifld}).data);
        
    endfor
    
    
    

    % the dimensions time was already created in the previous call. Its size
    % does not have to be repeated here.
    nccreate(fn, 'time', 'Dimensions', {'time'}, "Format", fmt, 'DeflateLevel', compression_level);
    ncwriteatt(fn, 'time', 'units', ['days since ' datestr(torigin,31)])
    ncwriteatt(fn, 'time', 'date', datestr(L2.time(1), 'yyyy-mm-dd'))
    ncwrite(fn,'time', L2.time-torigin);
    
    nccreate(fn, 'wavelength', 'Dimensions', {'wavelength'}, "Format", fmt, 'DeflateLevel', compression_level);
    ncwriteatt(fn, 'wavelength', 'units', 'nm');
    ncwrite(fn,'wavelength', L2.wv);
   
   
   
   
   
    # write geometry
    f2 = {"vaa", "vza", "sza", "saa", "phi"};
    f2_i = {"sensor azimuth angle", ...
            "sensor zenith angle", ...
            "solar zenith angle", ...
            "solar azimuth angle", ...
            "(sensor - sun) azimuth angle"};
            
    for if2 = 1:length(f2)
        nccreate(fn, f2{if2}, 'Dimensions', {'time'}, "Format", fmt, 'DeflateLevel', compression_level);
        ncwriteatt(fn, f2{if2}, 'units', 'degrees')
        ncwriteatt(fn, f2{if2}, 'long name', f2_i{if2})
        ncwrite(fn,f2{if2}, L2.(f2{if2}));
    endfor
    
    
    
    
    
    
    # write ship's motion
    f2 = {"tilt", "pitch", "roll"};
            
    for if2 = 1:length(f2)
        nccreate(fn, f2{if2}, 'Dimensions', {'time'}, "Format", fmt, 'DeflateLevel', compression_level);
        ncwriteatt(fn, f2{if2}, 'units', 'degrees')
        ncwrite(fn,f2{if2}, L2.(f2{if2}));
    endfor
    
    
    
    
    
    # write gps data
    f2 = {"lat", "lon", "hdg"};
    f2_i = {"latitude N", ...
            "longitude E", ...
            "heading with respect to north"};
            
    for if2 = 1:length(f2)
        nccreate(fn, f2{if2}, 'Dimensions', {'time'}, "Format", fmt, 'DeflateLevel', compression_level);
        ncwriteatt(fn, f2{if2}, 'units', 'degrees')
        ncwriteatt(fn, f2{if2}, 'long name', f2_i{if2})
        ncwrite(fn,f2{if2}, L2.gps.(f2{if2}));
    endfor
   
   
   
   
    
    # write file info (global attribute)
    f2 = {"L1", "L2"};
    f2_i = {"original L1 file", ...
            "original L2 file"};
            
    for if2 = 1:length(f2)
        ncwriteatt(fn, "/", f2_i{if2}, L2.files.(f2{if2}))
    endfor
  
  
  
    # write file info (global attribute)
    [~,tmp] = system("whoami");
    ncwriteatt(fn, "/", "user who created file", tmp(1:end-1))
    ncwriteatt(fn, "/", "date of NetCDF creation", datestr(now(), 31))

  
    
    
    
    
    
    # write wind and other ship info
    f2 = {"true_wind_spd", "true_wind_dir"};
    f2_i = {"wind speed [m/s]", ...
            "wind direction [degrees from north]", ...
            "ship's speed over ground [m/s]"};
    f2_u = {"m/s", ...
            "degrees from north", ...
            "m/s"};
            
    for if2 = 1:length(f2)
        nccreate(fn, f2{if2}, 'Dimensions', {'time'}, "Format", fmt, 'DeflateLevel', compression_level);
        ncwriteatt(fn, f2{if2}, 'long name', f2_i{if2})
        ncwriteatt(fn, f2{if2}, 'units', f2_u{if2})
        ncwrite(fn, f2{if2}, L2.(f2{if2}))
    endfor
   
    
    
    
    
    
    # write oceanlogger data
	if isfield(L2, 'oceanlogger')
		f2 = fieldnames(L2.oceanlogger);
		f2_u = {    'degrees Celsius', ...
		            '\%RH', ...
		            'umol/s.m2', ...
		            'W/m2', ...
		            'degrees Celsius', ...
		            '\%RH', ...
		            'umol/S.m2', ...
		            'W/m2', ...
		            'hPa', ...
		            'hPa', ...
		            'degrees Celsius', ...
		            'S/ma', ...
		            'psu', ...
		            'm/s', ...
		            'ug/l', ...
		            'degrees Celsius', ...
		            'l/min', ...
		            'degrees Celsius', ...
		            '-',...
		            '-'};
            
		for if2 = 1:length(f2)
		    if strcmp(f2{if2}, 'chl')
		        continue
		    endif
		    nccreate(fn, f2{if2}, 'Dimensions', {'time'}, "Format", fmt, 'DeflateLevel', compression_level);
		    ncwriteatt(fn, f2{if2}, 'units', f2_u{if2})
		    ncwrite(fn, f2{if2}, L2.oceanlogger.(f2{if2}))
		endfor
	endif
    
    
    
    
    
    
    
    # write Rrs, rho and other derived radiometric quantities or variables
    f2 = {"Rrs", "rho_fitted_1", "rho_fitted_2", "Lw", "chl_estimated", "exLwn", "exRrs"};
    f2_i = {"Remote-sensing reflectance not corrected for BRDF effects", ...
            "Surface reflectance factor (rho) fitted using 2-parameter function (hsas_cmp_rho_2pars.m)", ...
            "Offset term fitted using 2-parameter function (hsas_cmp_rho_2pars.m)", ...
            "Water-leaving radiance not corrected for BRDF effects", ...
            "Chlorophyll concentration estimated with Zibordi's Atlantic algorithm from Rrs data", ...
            "Exact normalized water-leaving radiance (eq. 13, Morel et al., 2002, Applied Optics, 41(30), 6289-6306). NOTE: wavelength range is limited due to limited wavelength range in the BRDF look-up tables", ...
            "Exact normalized remote-sensing reflectance: exRrs = exLwn*F0, where F0 is the solar irradiance at the top of the atmosphere at the mean Sunâ€“Earth distance. NOTE: wavelength range is limited due to limited wavelength range in the BRDF look-up tables"};
            
    f2_u = {"1/sr", ...
            "-", ...
            units_rad, ...
            units_rad, ...
            "ug/l", ...
            units_rad, ...
            "1/sr"   };
            
    for if2 = 1:length(f2)
    
#         if strcmp(f2{if2}, 'chl_estimated') 
#             nccreate(fn, f2{if2}, 'Dimensions', {'time'}, "Format", fmt, 'DeflateLevel', compression_level);
#             
#         else
        if strcmp(f2{if2}, 'rho_fitted_1') | strcmp(f2{if2}, 'rho_fitted_2') | strfind(f2{if2}, 'chl')
            nccreate(fn, f2{if2}, 'Dimensions', {'time'}, "Format", fmt, 'DeflateLevel', compression_level);
            
        else
            nccreate(fn, f2{if2}, 'Dimensions', {'time', 'wavelength'}, "Format", fmt, 'DeflateLevel', compression_level);
            
        endif
        
        
        
        if strfind(f2{if2}, 'chl') 
            ncwriteatt(fn, f2{if2}, 'long name', f2_i{if2})
            ncwriteatt(fn, f2{if2}, 'units', f2_u{if2})
        else
            ncwriteatt(fn, f2{if2}, 'long name', f2_i{if2})
            ncwriteatt(fn, f2{if2}, 'units', f2_u{if2})
        endif
        
        
        
        if strfind(f2{if2}, 'chl') 
            ncwrite(fn, f2{if2}, L2.(f2{if2}))
            
        elseif strcmp(f2{if2}, 'rho_fitted_1')
            ncwrite(fn, f2{if2}, L2.(f2{if2}(1:end-2))(:,1))
            
        elseif strcmp(f2{if2}, 'rho_fitted_2')
            ncwrite(fn, f2{if2}, L2.(f2{if2}(1:end-2))(:,2))
            
        else
            ncwrite(fn, f2{if2}, L2.(f2{if2}).data)
            
        endif
        
    endfor

    
    
    disp(['written NetCDF file: ', fn]);
    fflush(stdout);
   
    

endfunction
